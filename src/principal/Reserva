/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package desenho.preDiagrama;

import controlador.apoios.IObjetoPintavel;
import controlador.apoios.ProcessadorExprSimples;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 *
 * @author ccandido
 */
public class baseDrawerItem implements Serializable, IObjetoPintavel {

    private final iBaseDrawer dono;

    public baseDrawerItem(iBaseDrawer dono) {
        super();
        this.dono = dono;
    }

    private transient boolean outroPintor = false;

    @Override
    public void setOutroPintor(boolean op) {
        outroPintor = op;
    }

    @Override
    public boolean isOutroPintor() {
        return outroPintor;
    }

    private boolean DrawComplexPath(Graphics2D g, int l, int t) {
        String[] dist = path.split(",");
        int dl = dist.length;
        if (dl < 3) {
            g.drawString("?", l, t);
            return false;
        }
        if (dl % 2 > 0) {
            String[] tmp = new String[dl + 1];
            tmp[dl] = "0";
            dist = tmp;
            dl = dist.length;
        }
        int tam = dl / 2;
        int xPoints[] = new int[tam];
        int yPoints[] = new int[tam];
        try {
            int y = 0;
            for (int i = 0; i < tam; i++) {
                xPoints[i] = l + Expr(dist[y++].trim());
                yPoints[i] = t + Expr(dist[y++].trim());
//                xPoints[i] = l + Integer.valueOf(dist[y++].trim());
//                yPoints[i] = t + Integer.valueOf(dist[y++].trim());
            }
        } catch (Exception x) {
            g.drawString("?", l, t);
            return false;
        }
        if (isFill()) {
            g.fillPolygon(xPoints, yPoints, tam);
        } else {
            g.drawPolygon(xPoints, yPoints, tam);
        }
        return true;
    }

    private int Expr(String trim) throws Exception {
        String conv = trim.replaceAll("[w,W]", Integer.toString(dono.getW()));
        conv = conv.replaceAll("[h,H]", Integer.toString(dono.getH()));
        conv = conv.replaceAll("[l,L]", Integer.toString(dono.getL()));
        conv = conv.replaceAll("[t,T]", Integer.toString(dono.getT()));
        int res = 0;
        try {
            res = Integer.valueOf(conv);
        } catch (Exception e) {
            ProcessadorExprSimples pEx = new ProcessadorExprSimples();
            if (pEx.IsMathExpr(conv)) {
                //try {
                return pEx.processaExprInt(conv);
                //} catch (Exception x) {
                //    throw x;
                //}
            }
            throw e;
        }
        return res;
    }

    public enum tipoDrawer {

        tpNothing, tpQuadrado, tpCirculo, tpMedidaH, tpMedidaV, tpPath
    }

    private int left = 0;

    public Color getCor() {
        return cor;
    }

    public void setCor(Color cor) {
        this.cor = cor;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getLeft() {
        return left;
    }

    public void setLeft(int left) {
        this.left = left;
    }

    public tipoDrawer getTipo() {
        return tipo;
    }

    public void setTipo(tipoDrawer tipo) {
        this.tipo = tipo;
    }

    public void SetTipo(int tipo) {
        tipoDrawer inttp = tipoDrawer.tpNothing;

        try {
            inttp = tipoDrawer.values()[tipo];
        } catch (Exception e) {
        }
        this.tipo = inttp;
    }

    public int getTop() {
        return top;
    }

    public void setTop(int top) {
        this.top = top;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    private int top = 0;
    private int width = 0;
    private int height = 0;
    private Color cor = Color.BLACK;
    private boolean invertido = false;
    private String path = "0,0";
    private boolean fill = true;
    private boolean recivePaint = false;

    public boolean isRecivePaint() {
        return recivePaint;
    }

    public void setRecivePaint(boolean recivePaint) {
        this.recivePaint = recivePaint;
    }

    public boolean isFill() {
        return fill;
    }

    public void setFill(boolean fill) {
        this.fill = fill;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public boolean isInvertido() {
        return invertido;
    }

    public void setInvertido(boolean invertido) {
        this.invertido = invertido;
    }
    private tipoDrawer tipo = tipoDrawer.tpNothing;

    ///???Public static void LoadToXml(ArrayList<InspectorProperty> pai, Element principal)
    ///???Public static void SaveToXml(ArrayList<InspectorProperty> cojunto, Element principal)
    ///??? remover/modificar o m√©todo abaixo
    public void SaveToXml(Document doc, Element me) {
        Element nv = util.XMLGenerate.ValorInteger(doc, getClass().getSimpleName(), tipo.ordinal());
        nv.setAttribute("left", Integer.toString(left));
        nv.setAttribute("top", Integer.toString(top));
        nv.setAttribute("width", Integer.toString(width));
        nv.setAttribute("height", Integer.toString(height));
        nv.setAttribute("cor", util/////////Integer.toString(cor.getRGB()));
        nv.setAttribute("invertido", Boolean.toString(invertido));
        nv.setAttribute("path", path);
        nv.setAttribute("fill", Boolean.toString(fill));
        nv.setAttribute("recivePaint", Boolean.toString(recivePaint));

        me.appendChild(nv);
    }

    public void DoPaint(Graphics2D g) {
        if (!recivePaint) {
            g.setColor(cor);
        }
        int l = left;
        int t = top;
        int w = width;

        if (!outroPintor) {
            l = dono.getL() + left;
            t = dono.getT() + top;
            w = dono.getW() + width;
        }

        switch (tipo) {
            case tpCirculo:
                if (isFill()) {
                    g.fillOval(l, t, width, height);
                } else {
                    g.drawOval(l, t, width, height);
                }
                break;
            case tpQuadrado:
                if (isFill()) {
                    g.fillRect(l, t, width, height);
                } else {
                    g.drawRect(l, t, width, height);
                }
                break;
            case tpMedidaH:
                medidaH(g, l, t);
                break;
            case tpMedidaV:
                medidaV(g, l, t);
                break;
            case tpPath:
                DrawComplexPath(g, l, t);
                break;
            default:
                g.drawLine(l, t, l + w, t);
                break;
        }
    }

    private void medidaH(Graphics2D g, int l, int t) {
        FontMetrics fm = g.getFontMetrics();
        String vl = dono.FormateUnidadeMedida(width);
        int xini = l;
        int pre_y = t;
        int xfim = l + width;
        int yfim = t + height / 2;

        int traco = height;
        int ytraco = pre_y;// - (traco/2);

        g.drawLine(xini, ytraco, xini, ytraco + traco);
        g.drawLine(xfim, ytraco, xfim, ytraco + traco);
        g.drawLine(xini, yfim, xfim, yfim);

        xini = xini + (width - fm.stringWidth(vl)) / 2;
        int yini = invertido ? yfim + (fm.getHeight() - fm.getDescent()) : yfim - fm.getDescent();// yfim + (fm.getHeight()) / 2 - fm.getDescent();
        g.drawString(vl, xini, yini);
    }

    private void medidaV(Graphics2D g, int l, int t) {
        FontMetrics fm = g.getFontMetrics();
        String vl = dono.FormateUnidadeMedida(height);
        int traco = width;
        int xIni = l;// + (traco) / 2;
        int xFim = xIni + traco;
        int yIni = t;
        int yFim = t + height;
        int xLin = l + (width / 2);

        g.drawLine(xIni, yIni, xFim, yIni);
        g.drawLine(xIni, yFim, xFim, yFim);
        g.drawLine(xLin, yIni, xLin, yFim);

        int degrees = isInvertido() ? 90 : -90;
        int desse = isInvertido() ? 0 : fm.stringWidth(vl);
        //int centra = fm.getHeight() / 2 - fm.getDescent();
        int centra = fm.getHeight() - fm.getDescent();
        centra = isInvertido() ? -centra : centra;

        AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(degrees));
        Font f = new Font(g.getFont().getName(), Font.BOLD, g.getFont().getSize());
        Font f2 = g.getFont();
        g.setFont(f.deriveFont(at));
        yIni = yIni + (height - fm.stringWidth(vl)) / 2 + desse;
        g.drawString(vl, xLin + centra, yIni);
        g.setFont(f2);
    }
}